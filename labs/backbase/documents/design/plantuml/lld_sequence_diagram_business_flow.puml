@startuml

actor User
participant "Backbase API" as API
participant Controller
participant "Anti-corruption Layer" as ACL
participant "Peristence Client" as Client
database  Database  as DB

== Use Case (1): Get account details  ==

note over API
The sequence diagram assumes that the user already has a bank account.
end note
group Check balancet
User -> API: Get back acount details
API -> Controller: Invoke REST controller
Controller -> ACL: Request to get the account details
ACL -> Client: Invoke databae access
Client -> DB: Perform databae query
DB --> Client:
Client --> ACL:
ACL --> Controller:
Controller --> API:
API --> User
end group

== Use Case (2): Perform a transaction  ==

note over API
The sequence diagram talks about Performing a transaction and the use case of viewing
transaction is knowingly omitted.
end note
group Performing a transaction
User -> API: Submit transaction request
API -> Controller: Invoke REST controller
Controller -> ACL: Request to peform transaction
ACL -> ACL: Checks daily transaction limit
alt #lightblue Daily limit transaction limit is fine
  ACL -> ACL: perform the transaction
  alt #orange transaction accepted but deferred for later processing
    ACL -> ACL: Accept the transaction
    ACL -> Controller: Report HTTP STATUS 201 with request accepted
    Controller -> API:
    note over Controller
      User need to check status of transaction or a system will be designed to notify as soon as transaction is done
    end note
  else #lightgreen
    ACL -> Client: Process the transaction
    Client -> DB: Update database
    DB --> Client:
    Client -> ACL:
    ACL --> Controller:
    Controller --> API:
  end
else #red
  ACL -> Controller: report the error
  Controller --> API: report transaction pohibited error
end

API --> User:

end group

@enduml